// Copyright (c) Lucas Girouard-Stranks (https://github.com/lithiumtoast). All rights reserved.
// Licensed under the MIT license. See LICENSE file in the Git repository root directory for full license information.

// <auto-generated />
// ReSharper disable All

using System;
using System.Runtime.InteropServices;
using System.Text;

public static unsafe partial class _FAudio
{
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct FACTNotification_FNA
	{
		public byte type;
		public int timeStamp;
		public IntPtr pvContext;
		public FACTNotification_union anon;
	}
	
	[StructLayout(LayoutKind.Explicit)]
	public struct FACTNotification_union
	{
		[FieldOffset(0)]
		public FACTNotificationCue cue;
		[FieldOffset(0)]
		public FACTNotificationMarker marker;
		[FieldOffset(0)]
		public FACTNotificationSoundBank soundBank;
		[FieldOffset(0)]
		public FACTNotificationWaveBank waveBank;
		[FieldOffset(0)]
		public FACTNotificationVariable variable;
		[FieldOffset(0)]
		public FACTNotificationGUI gui;
		[FieldOffset(0)]
		public FACTNotificationWave wave;
	}
	
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct FACTNotificationCue
	{
		public ushort cueIndex;
		public FACTSoundBank* pSoundBank;
		public FACTCue* pCue;
	}
	
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct FACTNotificationMarker
	{
		public ushort cueIndex;
		public FACTSoundBank* pSoundBank;
		public FACTCue* pCue;
		public uint marker;
	}
	
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct FACTNotificationWaveBank
	{
		public FACTWaveBank* pWaveBank;
	}
	
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct FACTNotificationSoundBank
	{
		public FACTSoundBank* pSoundBank;
	}
	
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct FACTNotificationVariable
	{
		public ushort cueIndex;
		public FACTSoundBank* pSoundBank;
		public FACTCue* pCue;
		public ushort variableIndex;
		public float variableValue;
		public int local;
	}

	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct FACTNotificationGUI
	{
		public uint reserved;
	}
	
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct FACTNotificationWave
	{
		public FACTWaveBank* pWaveBank;
		public ushort waveIndex;
		public ushort cueIndex;
		public FACTSoundBank* pSoundBank;
		public FACTCue* pCue;
		public FACTWave* pWave;
	}
    
    public const uint FACT_FLAG_MANAGEDATA = 0x00000001;

    public const uint FACT_FLAG_STOP_RELEASE = 0x00000000;
    public const uint FACT_FLAG_STOP_IMMEDIATE = 0x00000001;

    public const uint FACT_FLAG_BACKGROUND_MUSIC = 0x00000002;
    public const uint FACT_FLAG_UNITS_MS = 0x00000004;
    public const uint FACT_FLAG_UNITS_SAMPLES = 0x00000008;

    public const uint FACT_STATE_CREATED = 0x00000001;
    public const uint FACT_STATE_PREPARING = 0x00000002;
    public const uint FACT_STATE_PREPARED = 0x00000004;
    public const uint FACT_STATE_PLAYING = 0x00000008;
    public const uint FACT_STATE_STOPPING = 0x00000010;
    public const uint FACT_STATE_STOPPED = 0x00000020;
    public const uint FACT_STATE_PAUSED = 0x00000040;
    public const uint FACT_STATE_INUSE = 0x00000080;
    public const uint FACT_STATE_PREPAREFAILED = 0x80000000;

    public const short FACTPITCH_MIN = -1200;
    public const short FACTPITCH_MAX = 1200;
    public const short FACTPITCH_MIN_TOTAL = -2400;
    public const short FACTPITCH_MAX_TOTAL = 2400;

    public const float FACTVOLUME_MIN = 0.0f;
    public const float FACTVOLUME_MAX = 16777216.0f;

    public const ushort FACTINDEX_INVALID = 0xFFFF;
    public const ushort FACTVARIABLEINDEX_INVALID = 0xFFFF;
    public const ushort FACTCATEGORY_INVALID = 0xFFFF;

    public const byte FACTNOTIFICATIONTYPE_CUEPREPARED = 1;
    public const byte FACTNOTIFICATIONTYPE_CUEPLAY = 2;
    public const byte FACTNOTIFICATIONTYPE_CUESTOP = 3;
    public const byte FACTNOTIFICATIONTYPE_CUEDESTROYED = 4;
    public const byte FACTNOTIFICATIONTYPE_MARKER = 5;
    public const byte FACTNOTIFICATIONTYPE_SOUNDBANKDESTROYED = 6;
    public const byte FACTNOTIFICATIONTYPE_WAVEBANKDESTROYED = 7;
    public const byte FACTNOTIFICATIONTYPE_LOCALVARIABLECHANGED = 8;
    public const byte FACTNOTIFICATIONTYPE_GLOBALVARIABLECHANGED = 9;
    public const byte FACTNOTIFICATIONTYPE_GUICONNECTED = 10;
    public const byte FACTNOTIFICATIONTYPE_GUIDISCONNECTED = 11;
    public const byte FACTNOTIFICATIONTYPE_WAVEPREPARED = 12;
    public const byte FACTNOTIFICATIONTYPE_WAVEPLAY = 13;
    public const byte FACTNOTIFICATIONTYPE_WAVESTOP = 14;
    public const byte FACTNOTIFICATIONTYPE_WAVELOOPED = 15;
    public const byte FACTNOTIFICATIONTYPE_WAVEDESTROYED = 16;
    public const byte FACTNOTIFICATIONTYPE_WAVEBANKPREPARED = 17;
    public const byte FACTNOTIFICATIONTYPE_WAVEBANKSTREAMING_INVALIDCONTENT = 18;

    public const byte FACT_FLAG_NOTIFICATION_PERSIST = 0x01;
    
    [DllImport(_FAudio.LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern void XNA_SongInit();

	[DllImport(_FAudio.LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern void XNA_SongQuit();

	[DllImport(_FAudio.LibraryName, CallingConvention = CallingConvention.Cdecl)]
	private static extern unsafe float XNA_PlaySong(byte* name);
	public static unsafe float XNA_PlaySong(string name)
	{
		int utf8BufSize = Utf8Size(name);
		byte* utf8Buf = stackalloc byte[utf8BufSize];
		return XNA_PlaySong(Utf8Encode(name, utf8Buf, utf8BufSize));
	}

	[DllImport(_FAudio.LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern void XNA_PauseSong();

	[DllImport(_FAudio.LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern void XNA_ResumeSong();

	[DllImport(_FAudio.LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern void XNA_StopSong();

	[DllImport(_FAudio.LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern void XNA_SetSongVolume(float volume);

	[DllImport(_FAudio.LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern uint XNA_GetSongEnded();

	[DllImport(_FAudio.LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern void XNA_EnableVisualization(uint enable);

	[DllImport(_FAudio.LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern uint XNA_VisualizationEnabled();

	[DllImport(_FAudio.LibraryName, CallingConvention = CallingConvention.Cdecl)]
	public static extern void XNA_GetSongVisualizationData(
		float[] frequencies,
		float[] samples,
		uint count
	);
	
	/* Used for stack allocated string marshaling. */
	private static int Utf8Size(string str)
	{
		return (str.Length * 4) + 1;
	}
	
	private static unsafe byte* Utf8Encode(string str, byte* buffer, int bufferSize)
	{
		fixed (char* strPtr = str)
		{
			Encoding.UTF8.GetBytes(strPtr, str.Length + 1, buffer, bufferSize);
		}

		return buffer;
	}
	
	public struct FAudioXMA2WaveFormatEx
	{
		public FAudioWaveFormatEx wfx;
		public ushort wNumStreams;
		public uint dwChannelMask;
		public uint dwSamplesEncoded;
		public uint dwBytesPerBlock;
		public uint dwPlayBegin;
		public uint dwPlayLength;
		public uint dwLoopBegin;
		public uint dwLoopLength;
		public byte bLoopCount;
		public byte bEncoderVersion;
		public ushort wBlockCount;
	};
}